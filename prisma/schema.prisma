generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  hashedPassword String
  name           String
  role           Role       @default(CUSTOMER)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  addresses      Address[]
  cartItems      CartItem[]
  orders         Order[]
  reviews        Review[]

  @@index([email])
}

model Product {
  id             String           @id @default(uuid())
  name           String
  description    String
  price          Decimal          @db.Decimal(10, 2)
  stock          Int              @default(0)
  imageUrl       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categoryId     String
  slug           String?          @unique
  cartItems      CartItem[]
  orderItems     OrderItem[]
  category       Category         @relation(fields: [categoryId], references: [id])
  ProductVariant ProductVariant[]
  reviews        Review[]

  @@index([categoryId])
  @@index([slug])
}

model CartItem {
  id               String          @id @default(uuid())
  userId           String
  productId        String
  quantity         Int             @default(1)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  productVariantId String?
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, productVariantId])
  @@index([userId])
  @@index([productId])
  @@index([productVariantId])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  addressId String
  address   Address     @relation(fields: [addressId], references: [id])
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id               String          @id @default(uuid())
  orderId          String
  productId        String
  quantity         Int
  price            Decimal         @db.Decimal(10, 2)
  productVariantId String?
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id])
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Restrict)

  @@unique([orderId, productId, productVariantId])
  @@index([orderId])
  @@index([productId])
  @@index([productVariantId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?  @default("")
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  street    String
  apartment String?
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([userId])
}

model ProductVariant {
  id        String      @id
  productId String
  sku       String?     @unique
  size      String?
  color     String?
  material  String?
  price     Decimal?    @db.Decimal(10, 2)
  stock     Int         @default(0)
  imageUrl  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime
  CartItem  CartItem[]
  OrderItem OrderItem[]
  Product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size, color])
  @@index([productId])
  @@index([sku])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
